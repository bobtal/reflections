When would you want to use a remote repository rather than keeping all your work local?
  
  When working in a team or working from several computers.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	Because I don't let my underage son drive my car :). He could make a big mess. Similarly (to an extent), why would I want GitHub to automatically update my local repo whenever there's an update online. Maybe I'm making my own changes locally and when I'm ready I can pull the changes from the remote repo (which could've been done by me and pushed from another computer or by someone else if working on a team). So automatically pulling changes could create instant conflicts and whatnot before my local changes are ready for a commit. It just doesn't seem right. That's like using GitHub like a backup service, which is a valid use in some cases I guess, but it's not the general idea.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
	Fork means cloning a repository from GitHub on GitHub, from one user's account to another (logged in user's) account. Cloning is just cloning a repository from anywhere (including GitHub) to a local computer. And branching is different from the first two concepts, it's creating a new branch within a repository. It's a separate branch where some new work could be done, without affecting the code on the original branch from which the new branch was created (usually master).

What is the benefit of having a copy of the last known state of the remote stored locally?

	You can work offline knowing the last state of the remote. Though you should andticipate more recent commits on the remote if working on a team. In general, it's the same benefit of having the whole web stored locally so in case you have to go offline you still have access to a snapshot of the whole web from a few hours ago (or maybe more reasonable from a few selected websites you visit regularly). It's just benefitial, can't thnik of a more specific way to describe it.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Without using Git or GitHub, I would collaborate with others by making sure the parts of the project that each team member works on are as separate as possible, ideally not sharing any files, though probably relying on some elementary files which rarely get updated. Or when updated, each team member gets a notification to update their version before moving on and report any bugs. And if bugs happen, it could get messy since the other team members which didn't encounter the bug would need to wait for the bug to be fixed and check whether that bug fix on the main file would introduce bugs in their own parts of the project. 
	So, messy, but I assume it would be easier to collaborate this way if some or most of the team members don't really know how to use Git or GitHub, and if the project could be separated in non-related parts. 
	But in reality, I assume most projects can't be divided in non-related parts and it's best that everyone knows how to use Git and GitHub to efficiently collaborate on larger projects as a team. So the hard part here is mastering Git and GitHub but it should be worth it in the end.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	The first question can be a personal choice to some extent if the project is small enough. So, it could be done without branches at all if there's only one developer working on it, with an option for someone to hop in from to time to add something the original developer needs help with. It could probably still be best if at least that other developer creates a separate branch when helping add some feature. In any case, even if it's a solo project, branches can help because most likely there won't be conflicts like in the lesson, but still the developer would have the code history "a bit cleaner" and less chance of "breaking some important stuff that already worked". So, it really depends, and branches seem like a required option when working on larger projects with multiple people involved.
	The benefit of not using separate branches is "less hassle", but only if the circumstances allow, while the benefit of using separate branches is that it's harder to "break stuff", but it's also harder to work with this approach. Still, as one gets in the habit of using separate branches and the "hassle" that comes with it, the pros outweight the cons in my opinion.